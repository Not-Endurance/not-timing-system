@using NTS.Domain.Setup.Entities;
@using NTS.Judge.Setup.Competitions
@using Not.Blazor.TM
@using Not.Blazor.TM.Models;
@using Not.Blazor.TM.Forms;
@using Not.Blazor.TM.Forms.Components;
@using Not.Extensions;

@inherits FormTM<CompetitionFormModel>;

<EditForm Model="Model">
    <MudTextField @ref="_nameField" @bind-Value="Model.Name" Label="@Localizer.Get("Name")" />

    <NotSelect @ref="_rulesetField" Label="Ruleset" @bind-Value="Model.Ruleset" Items="_competitionRules" />

    <NotSelect @ref="_typeField" Label="Type" @bind-Value="Model.Type" Items="_competitionTypes" />

    <MudDatePicker DisableToolbar="true" @ref="_dayField" @bind-Date="Model.Day" Label="@Localizer.Get("Date")" />

    <MudTimePicker DisableToolbar="true" @ref="_timeField" @bind-Time="Model.Time" Label="@Localizer.Get("Time")" />

    <NotSwitch @bind-Value="Model.UseCompulsoryThreshold" Label="Use automatic CRI" />

    @if (Model.UseCompulsoryThreshold)
    {
        <MudNumericField @ref="_requiredInspectionCompulsoryThreshold" @bind-Value="Model.CompulsoryThresholdMinutes" />
    }
</EditForm>

@code {
    MudNumericField<int?> _requiredInspectionCompulsoryThreshold = default!;
    MudTextField<string?> _nameField = default!;
    NotSelect<CompetitionType> _typeField = default!;
    NotSelect<CompetitionRuleset> _rulesetField = default!;
    MudPicker<DateTime?> _dayField = default!;
    MudPicker<TimeSpan?> _timeField = default!;

    List<NotListModel<CompetitionType>> _competitionTypes = NotListModel.FromEnum<CompetitionType>().ToList();
    List<NotListModel<CompetitionRuleset>> _competitionRules = NotListModel.FromEnum<CompetitionRuleset>().ToList();

    public override void RegisterValidationInjectors()
    {
        RegisterInjector(nameof(Competition.Name), () => _nameField);
        RegisterInjector(nameof(Competition.Start), () => _dayField);
        RegisterInjector(nameof(Competition.Start), () => _timeField);
        RegisterInjector(nameof(Competition.Type), () => _typeField);
        RegisterInjector(nameof(Competition.Ruleset), () => _rulesetField);
        RegisterInjector(nameof(Competition.CompulsoryThresholdSpan), () => _typeField);
    }
}