@using Not.Blazor.TM
@using NTS.Judge.Blazor.Ports
@using NTS.Domain.Core.Entities
@using Not.Events

@inherits NotComponent;

@* //TODO: probably extract this chipset into NotChipGroup component or something similar. Also used in DashboardComponent *@
@if (_behind.Ranklist != null)
{
    <MudChipSet T="int" SelectedValue="_behind.Ranklist.RankingId" SelectedValueChanged="_behind.SelectRanking">
        @foreach (var tuple in _rankingsByDistance)
        {
            <TextDividerTM Text="@tuple.Name" />
            @foreach (var ranking in tuple.ranking)
            {
                <MudChip Text="@ranking.Category.ToString()" Value="@ranking.Id" Color="Color.Primary" Style="min-width: 1rem" />
            }
        }
    </MudChipSet>
}


@code {
    private MudChip<int>? _selectedChip;
    private List<(string Name, IOrderedEnumerable<Ranking> ranking)> _rankingsByDistance = [];

    [Inject]
    public IRanklistBehind _behind { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await Observe(_behind);

        var rankings = await _behind.GetRankings();
        // TODO: this is too complicated, probably should be in the behind or better yet in the Domain Model
        _rankingsByDistance = rankings
            .GroupBy(x => x.Name)
            .Select(x => (
                x.Key, 
                x.Where(x => x.Entries.Any()).OrderBy(x => x.Category)
            ))
            .ToList();
    }
}
